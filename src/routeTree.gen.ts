/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as FleetImport } from './routes/fleet'
import { Route as AnalyticsImport } from './routes/analytics'
import { Route as ConfigureRouteImport } from './routes/configure/route'
import { Route as IndexImport } from './routes/index'
import { Route as MonitorIndexImport } from './routes/monitor/index'
import { Route as ConfigureIndexImport } from './routes/configure/index'
import { Route as MonitorRobotRequestImport } from './routes/monitor/robotRequest'
import { Route as ConfigureUserImport } from './routes/configure/user'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FleetRoute = FleetImport.update({
  id: '/fleet',
  path: '/fleet',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsRoute = AnalyticsImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any)

const ConfigureRouteRoute = ConfigureRouteImport.update({
  id: '/configure',
  path: '/configure',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MonitorIndexRoute = MonitorIndexImport.update({
  id: '/monitor/',
  path: '/monitor/',
  getParentRoute: () => rootRoute,
} as any)

const ConfigureIndexRoute = ConfigureIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ConfigureRouteRoute,
} as any)

const MonitorRobotRequestRoute = MonitorRobotRequestImport.update({
  id: '/monitor/robotRequest',
  path: '/monitor/robotRequest',
  getParentRoute: () => rootRoute,
} as any)

const ConfigureUserRoute = ConfigureUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => ConfigureRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/configure': {
      id: '/configure'
      path: '/configure'
      fullPath: '/configure'
      preLoaderRoute: typeof ConfigureRouteImport
      parentRoute: typeof rootRoute
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/fleet': {
      id: '/fleet'
      path: '/fleet'
      fullPath: '/fleet'
      preLoaderRoute: typeof FleetImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/configure/user': {
      id: '/configure/user'
      path: '/user'
      fullPath: '/configure/user'
      preLoaderRoute: typeof ConfigureUserImport
      parentRoute: typeof ConfigureRouteImport
    }
    '/monitor/robotRequest': {
      id: '/monitor/robotRequest'
      path: '/monitor/robotRequest'
      fullPath: '/monitor/robotRequest'
      preLoaderRoute: typeof MonitorRobotRequestImport
      parentRoute: typeof rootRoute
    }
    '/configure/': {
      id: '/configure/'
      path: '/'
      fullPath: '/configure/'
      preLoaderRoute: typeof ConfigureIndexImport
      parentRoute: typeof ConfigureRouteImport
    }
    '/monitor/': {
      id: '/monitor/'
      path: '/monitor'
      fullPath: '/monitor'
      preLoaderRoute: typeof MonitorIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ConfigureRouteRouteChildren {
  ConfigureUserRoute: typeof ConfigureUserRoute
  ConfigureIndexRoute: typeof ConfigureIndexRoute
}

const ConfigureRouteRouteChildren: ConfigureRouteRouteChildren = {
  ConfigureUserRoute: ConfigureUserRoute,
  ConfigureIndexRoute: ConfigureIndexRoute,
}

const ConfigureRouteRouteWithChildren = ConfigureRouteRoute._addFileChildren(
  ConfigureRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/configure': typeof ConfigureRouteRouteWithChildren
  '/analytics': typeof AnalyticsRoute
  '/fleet': typeof FleetRoute
  '/login': typeof LoginRoute
  '/configure/user': typeof ConfigureUserRoute
  '/monitor/robotRequest': typeof MonitorRobotRequestRoute
  '/configure/': typeof ConfigureIndexRoute
  '/monitor': typeof MonitorIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsRoute
  '/fleet': typeof FleetRoute
  '/login': typeof LoginRoute
  '/configure/user': typeof ConfigureUserRoute
  '/monitor/robotRequest': typeof MonitorRobotRequestRoute
  '/configure': typeof ConfigureIndexRoute
  '/monitor': typeof MonitorIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/configure': typeof ConfigureRouteRouteWithChildren
  '/analytics': typeof AnalyticsRoute
  '/fleet': typeof FleetRoute
  '/login': typeof LoginRoute
  '/configure/user': typeof ConfigureUserRoute
  '/monitor/robotRequest': typeof MonitorRobotRequestRoute
  '/configure/': typeof ConfigureIndexRoute
  '/monitor/': typeof MonitorIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/configure'
    | '/analytics'
    | '/fleet'
    | '/login'
    | '/configure/user'
    | '/monitor/robotRequest'
    | '/configure/'
    | '/monitor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/analytics'
    | '/fleet'
    | '/login'
    | '/configure/user'
    | '/monitor/robotRequest'
    | '/configure'
    | '/monitor'
  id:
    | '__root__'
    | '/'
    | '/configure'
    | '/analytics'
    | '/fleet'
    | '/login'
    | '/configure/user'
    | '/monitor/robotRequest'
    | '/configure/'
    | '/monitor/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConfigureRouteRoute: typeof ConfigureRouteRouteWithChildren
  AnalyticsRoute: typeof AnalyticsRoute
  FleetRoute: typeof FleetRoute
  LoginRoute: typeof LoginRoute
  MonitorRobotRequestRoute: typeof MonitorRobotRequestRoute
  MonitorIndexRoute: typeof MonitorIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConfigureRouteRoute: ConfigureRouteRouteWithChildren,
  AnalyticsRoute: AnalyticsRoute,
  FleetRoute: FleetRoute,
  LoginRoute: LoginRoute,
  MonitorRobotRequestRoute: MonitorRobotRequestRoute,
  MonitorIndexRoute: MonitorIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/configure",
        "/analytics",
        "/fleet",
        "/login",
        "/monitor/robotRequest",
        "/monitor/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/configure": {
      "filePath": "configure/route.tsx",
      "children": [
        "/configure/user",
        "/configure/"
      ]
    },
    "/analytics": {
      "filePath": "analytics.tsx"
    },
    "/fleet": {
      "filePath": "fleet.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/configure/user": {
      "filePath": "configure/user.tsx",
      "parent": "/configure"
    },
    "/monitor/robotRequest": {
      "filePath": "monitor/robotRequest.tsx"
    },
    "/configure/": {
      "filePath": "configure/index.tsx",
      "parent": "/configure"
    },
    "/monitor/": {
      "filePath": "monitor/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
